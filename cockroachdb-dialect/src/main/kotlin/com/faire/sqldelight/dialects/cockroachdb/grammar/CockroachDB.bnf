{
  // Specify the parent parser.
  overrides="app.cash.sqldelight.dialects.postgresql.grammar.PostgreSqlParser"
  elementTypeClass = "com.alecstrong.sql.psi.core.SqlElementType"

  implements="com.alecstrong.sql.psi.core.psi.SqlCompositeElement"
  extends="com.alecstrong.sql.psi.core.psi.SqlCompositeElementImpl"
  psiClassPrefix = "CockroachDB"

  parserImports=[
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.ALTER"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.ALWAYS"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.ADD"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.AS"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.BY"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.CREATE"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.COLLATE"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.COMMA"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.CONSTRAINT"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.DATABASE"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.DEFAULT"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.DIGIT"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.DROP"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.EQ"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.EXISTS"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.FOREIGN"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.GENERATED"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.ID"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.IF"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.IN"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.INDEX"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.KEY"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.LP"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.NOT"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.NULL"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.ON"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.PRIMARY"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.ROW"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.RP"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.SET"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.STRING"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.TABLE"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.UNIQUE"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.USING"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.WHERE"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.WITH"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.WITHOUT"

    "static com.alecstrong.sql.psi.core.SqlParserUtil.alterTableAddColumnExt"
    "static com.alecstrong.sql.psi.core.SqlParser.alter_table_add_column_real"

    "static com.alecstrong.sql.psi.core.SqlParserUtil.alterTableRenameTableExt"
    "static com.alecstrong.sql.psi.core.SqlParser.alter_table_rename_table_real"

    "static com.alecstrong.sql.psi.core.SqlParserUtil.checkConstraintExt"
    "static com.alecstrong.sql.psi.core.SqlParser.check_constraint_real"

    "static com.alecstrong.sql.psi.core.SqlParserUtil.columnNameExt"
    "static com.alecstrong.sql.psi.core.SqlParser.column_name_real"

    "static com.alecstrong.sql.psi.core.SqlParserUtil.conflictClauseExt"
    "static com.alecstrong.sql.psi.core.SqlParser.conflict_clause_real"

    "static com.alecstrong.sql.psi.core.SqlParserUtil.databaseNameExt"
    "static com.alecstrong.sql.psi.core.SqlParser.database_name_real"

    "static com.alecstrong.sql.psi.core.SqlParser.expr"

    "static com.alecstrong.sql.psi.core.SqlParserUtil.foreignKeyClauseExt"
    "static com.alecstrong.sql.psi.core.SqlParser.foreign_key_clause_real"

    "static com.alecstrong.sql.psi.core.SqlParserUtil.identifierExt"
    "static com.alecstrong.sql.psi.core.SqlParser.identifier_real"

    "static com.alecstrong.sql.psi.core.SqlParserUtil.indexedColumnExt"
    "static com.alecstrong.sql.psi.core.SqlParser.indexed_column_real"

    "static com.alecstrong.sql.psi.core.SqlParserUtil.indexNameExt"
    "static com.alecstrong.sql.psi.core.SqlParser.index_name_real"

    "static com.alecstrong.sql.psi.core.SqlParserUtil.signedNumberExt"
    "static com.alecstrong.sql.psi.core.SqlParser.signed_number_real"

    "static com.alecstrong.sql.psi.core.SqlParserUtil.tableNameExt"
    "static com.alecstrong.sql.psi.core.SqlParser.table_name_real"

    "static com.alecstrong.sql.psi.core.SqlParserUtil.collationNameExt"
    "static com.alecstrong.sql.psi.core.SqlParser.collation_name_real"
  ]
}

overrides ::= table_constraint
  | column_constraint
  | int_data_type
  | big_int_data_type
  | string_data_type
  | date_data_type
  | blob_data_type
  | generated_clause
  | alter_table_rules
  | extension_stmt

index_using_hash ::= USING 'HASH' [ WITH LP 'bucket_count' EQ ansi_signed_number RP ]

table_constraint ::= table_family_constraint | [ CONSTRAINT ansi_identifier ] (
  ( PRIMARY KEY | [UNIQUE] INDEX | UNIQUE ) [ansi_index_name] LP ansi_indexed_column [ LP ansi_signed_number RP ] ( COMMA ansi_indexed_column [ LP ansi_signed_number RP ] ) * RP [ index_using_hash ] [('STORING' | 'COVERING' | 'INCLUDE') LP ansi_column_name ( COMMA ansi_column_name ) * RP ] [ WHERE <<expr '-1'>> ] ansi_conflict_clause [comment_type] |
  ansi_check_constraint |
  FOREIGN KEY LP ansi_column_name ( COMMA ansi_column_name ) * RP ansi_foreign_key_clause
) {
  extends = "app.cash.sqldelight.dialects.postgresql.grammar.psi.impl.PostgreSqlTableConstraintImpl"
  implements = "app.cash.sqldelight.dialects.postgresql.grammar.psi.PostgreSqlTableConstraint"
  override = true
}

table_family_constraint ::= 'FAMILY' [ ansi_identifier ] LP ansi_column_name ( COMMA ansi_column_name ) * RP

column_constraint ::= alter_table_add_column_family_constraint | [ CONSTRAINT ansi_identifier ] (
  PRIMARY KEY [ index_using_hash ] [ ASC | DESC ] ansi_conflict_clause |
  [ NOT ] NULL ansi_conflict_clause |
  UNIQUE ansi_conflict_clause |
  ansi_check_constraint |
  generated_clause |
  {default_constraint} |
  COLLATE ansi_collation_name |
  ansi_foreign_key_clause
) {
  extends = "app.cash.sqldelight.dialects.postgresql.grammar.psi.impl.PostgreSqlColumnConstraintImpl"
  implements = "app.cash.sqldelight.dialects.postgresql.grammar.psi.PostgreSqlColumnConstraint"
  override = true
}

alter_table_add_column_family_constraint ::= (
  ( 'FAMILY' ansi_identifier )
  | ( CREATE (
      ( 'FAMILY' [ ansi_identifier ] )
      | ( IF NOT EXISTS 'FAMILY' ansi_identifier )
    )
  )
)

int_data_type ::= 'INT4' {
  extends = "app.cash.sqldelight.dialects.postgresql.grammar.psi.impl.PostgreSqlIntDataTypeImpl"
  implements = "app.cash.sqldelight.dialects.postgresql.grammar.psi.PostgreSqlIntDataType"
  override = true
}

big_int_data_type ::= 'INT' | 'INTEGER' | 'INT8' | 'INT64' | 'BIGINT' {
  extends = "app.cash.sqldelight.dialects.postgresql.grammar.psi.impl.PostgreSqlBigIntDataTypeImpl"
  implements = "app.cash.sqldelight.dialects.postgresql.grammar.psi.PostgreSqlBigIntDataType"
  override = true
}

string_data_type ::= ((( 'CHARACTER' 'VARYING' ) | 'VARCHAR' | 'CHARACTER' | 'CHAR' | 'STRING') [ LP ansi_signed_number RP ]) | 'TEXT' | 'CITEXT' {
  extends = "app.cash.sqldelight.dialects.postgresql.grammar.psi.impl.PostgreSqlStringDataTypeImpl"
  implements = "app.cash.sqldelight.dialects.postgresql.grammar.psi.PostgreSqlStringDataType"
  override = true
}

date_data_type ::= 'DATE' | (('TIME' | 'TIMESTAMP') [ LP ansi_signed_number RP ] [(WITH | WITHOUT) 'TIME' 'ZONE']) | 'TIMESTAMPTZ' [ LP ansi_signed_number RP ] | 'INTERVAL' {
  extends = "app.cash.sqldelight.dialects.postgresql.grammar.psi.impl.PostgreSqlDateDataTypeImpl"
  implements = "app.cash.sqldelight.dialects.postgresql.grammar.psi.PostgreSqlDateDataType"
  override = true
}

blob_data_type ::= 'BYTEA' | 'BLOB' | 'BYTES' {
  extends = "app.cash.sqldelight.dialects.postgresql.grammar.psi.impl.PostgreSqlBlobDataTypeImpl"
  implements = "app.cash.sqldelight.dialects.postgresql.grammar.psi.PostgreSqlBlobDataType"
  override = true
}

create_index_stmt ::= CREATE [ UNIQUE ] INDEX [ 'CONCURRENTLY' ] [ IF NOT EXISTS ] [ [ ansi_database_name DOT ] ansi_index_name ] ON ansi_table_name
  ( USING 'GIN' LP ansi_indexed_column [ {gin_operator_class_stmt} ] ( COMMA ansi_indexed_column [ {gin_operator_class_stmt} ] ) * RP | LP ansi_indexed_column ( COMMA ansi_indexed_column ) * RP [ index_using_hash ] [('STORING' | 'COVERING' | 'INCLUDE') LP ansi_indexed_column ( COMMA ansi_indexed_column ) * RP ] [ WHERE <<expr '-1'>> ] ) {
  extends = "com.faire.sqldelight.dialects.cockroachdb.grammar.mixins.CreateIndexMixin"
  implements = "com.alecstrong.sql.psi.core.psi.SqlCreateIndexStmt"
  pin = 5
}

generated_clause ::= (postgres_generated_clause | cockroach_generated_clause) {
  extends = "app.cash.sqldelight.dialects.postgresql.grammar.psi.impl.PostgreSqlGeneratedClauseImpl"
  implements = "app.cash.sqldelight.dialects.postgresql.grammar.psi.PostgreSqlGeneratedClause"
  override = true
}

private postgres_generated_clause ::= GENERATED ( (ALWAYS AS LP <<expr '-1'>> RP 'STORED') | ( (ALWAYS | BY DEFAULT) AS {identity_clause} ) )

private cockroach_generated_clause ::= AS LP <<expr '-1'>> RP ('STORED' | 'VIRTUAL')

drop_index_stmt ::= DROP INDEX [ IF EXISTS ] [ ansi_table_name '@' ] ansi_index_name {
  mixin = "com.faire.sqldelight.dialects.cockroachdb.grammar.mixins.DropIndexMixin"
  implements = "com.alecstrong.sql.psi.core.psi.SqlDropIndexStmt"
  pin = 2
}

table_options ::= storage_options {
  extends = "com.alecstrong.sql.psi.core.psi.impl.SqlTableOptionsImpl"
  implements = "com.alecstrong.sql.psi.core.psi.SqlTableOptions"
}

storage_parameter_key ::= id
storage_parameter_value ::= id | string | digit

private storage_option_key_values ::= LP storage_parameter_key EQ storage_parameter_value (COMMA storage_parameter_key EQ storage_parameter_value) * RP

storage_options ::= WITH storage_option_key_values

alter_table_rules ::= (
  ansi_alter_table_add_column
  | ansi_alter_table_rename_table
  | {alter_table_rename_column}
  | {alter_table_drop_column}
  | {alter_table_add_constraint}
  | alter_table_alter_primary_key
  | alter_table_set_locality_options
  | alter_table_set_storage_options
  | alter_table_reset_storage_options
  | {alter_table_alter_column}
) {
  extends = "app.cash.sqldelight.dialects.postgresql.grammar.psi.impl.PostgreSqlAlterTableRulesImpl"
  implements = "app.cash.sqldelight.dialects.postgresql.grammar.psi.PostgreSqlAlterTableRules"
  override = true
}

alter_table_alter_primary_key ::= ALTER PRIMARY KEY USING "COLUMNS" LP ansi_column_name (COMMA ansi_column_name) * RP {
  pin = 5
}

region_name ::= string

private locality ::= 'LOCALITY' ( 'GLOBAL' | regional_locality )

private regional_locality ::= 'REGIONAL' ( BY TABLE  [ IN ( region_name | PRIMARY 'REGION') ] | BY ROW [ AS ansi_column_name ] | IN ( region_name | PRIMARY 'REGION') )

alter_table_set_locality_options ::= SET locality {
  pin = 2
}

alter_table_set_storage_options ::= SET storage_option_key_values

alter_table_reset_storage_options ::= 'RESET' LP storage_parameter_key (COMMA storage_parameter_key) * RP

extension_stmt ::= {create_sequence_stmt} | {copy_stdin} | alter_database_stmt | {truncate_stmt} | {set_stmt} | {drop_sequence_stmt} | {alter_sequence_stmt} | {create_extension_stmt} | {drop_extension_stmt} | {alter_extension_stmt} {
  extends = "app.cash.sqldelight.dialects.postgresql.grammar.psi.impl.PostgreSqlExtensionStmtImpl"
  implements = "app.cash.sqldelight.dialects.postgresql.grammar.psi.PostgreSqlExtensionStmt"
  override = true
}

alter_database_stmt ::= ALTER DATABASE ansi_database_name alter_database_rules {
  pin = 2
}

alter_database_rules ::= (
  alter_database_add_region
  | alter_database_drop_region
  | alter_database_set_region
  | alter_database_survive
)


alter_database_add_region ::= ADD 'REGION' region_name
alter_database_drop_region ::= DROP 'REGION' region_name
alter_database_set_region ::= SET ( PRIMARY | 'SECONDARY' ) 'REGION' region_name {
  pin = 2
}
alter_database_survive ::= 'SURVIVE' ( 'REGION' | 'ZONE' ) 'FAILURE'

private ansi_alter_table_add_column ::= <<alterTableAddColumnExt <<alter_table_add_column_real>>>>
private ansi_alter_table_rename_table ::= <<alterTableRenameTableExt <<alter_table_rename_table_real>>>>

private ansi_check_constraint ::= <<checkConstraintExt <<check_constraint_real>>>>
private ansi_column_name ::= <<columnNameExt <<column_name_real>>>>
private ansi_conflict_clause ::= <<conflictClauseExt <<conflict_clause_real>>>>
private ansi_database_name ::= <<databaseNameExt <<database_name_real>>>>
private ansi_foreign_key_clause ::= <<foreignKeyClauseExt <<foreign_key_clause_real>>>>
private ansi_identifier ::= <<identifierExt <<identifier_real>>>>
private ansi_indexed_column ::= <<indexedColumnExt <<indexed_column_real>>>>
private ansi_index_name ::= <<indexNameExt <<index_name_real>>>>
private ansi_signed_number ::= <<signedNumberExt <<signed_number_real>>>>
private ansi_table_name ::= <<tableNameExt <<table_name_real>>>>
private ansi_collation_name ::= <<collationNameExt <<collation_name_real>>>>
