{
  // Specify the parent parser.
  overrides="app.cash.sqldelight.dialects.postgresql.grammar.PostgreSqlParser"
  elementTypeClass = "com.alecstrong.sql.psi.core.SqlElementType"

  implements="com.alecstrong.sql.psi.core.psi.SqlCompositeElement"
  extends="com.alecstrong.sql.psi.core.psi.SqlCompositeElementImpl"
  psiClassPrefix = "CockroachDB"

  parserImports=[
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.ALTER"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.CREATE"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.COMMA"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.CONSTRAINT"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.DROP"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.EXISTS"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.FOREIGN"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.IF"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.INDEX"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.KEY"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.LP"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.NOT"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.ON"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.PRIMARY"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.RP"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.UNIQUE"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.USING"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.WHERE"

    "static com.alecstrong.sql.psi.core.SqlParserUtil.alterTableAddColumnExt"
    "static com.alecstrong.sql.psi.core.SqlParser.alter_table_add_column_real"

    "static com.alecstrong.sql.psi.core.SqlParserUtil.alterTableRenameTableExt"
    "static com.alecstrong.sql.psi.core.SqlParser.alter_table_rename_table_real"

    "static com.alecstrong.sql.psi.core.SqlParserUtil.checkConstraintExt"
    "static com.alecstrong.sql.psi.core.SqlParser.check_constraint_real"

    "static com.alecstrong.sql.psi.core.SqlParserUtil.columnNameExt"
    "static com.alecstrong.sql.psi.core.SqlParser.column_name_real"

    "static com.alecstrong.sql.psi.core.SqlParserUtil.conflictClauseExt"
    "static com.alecstrong.sql.psi.core.SqlParser.conflict_clause_real"

    "static com.alecstrong.sql.psi.core.SqlParserUtil.databaseNameExt"
    "static com.alecstrong.sql.psi.core.SqlParser.database_name_real"

    "static com.alecstrong.sql.psi.core.SqlParser.expr"

    "static com.alecstrong.sql.psi.core.SqlParserUtil.foreignKeyClauseExt"
    "static com.alecstrong.sql.psi.core.SqlParser.foreign_key_clause_real"

    "static com.alecstrong.sql.psi.core.SqlParserUtil.identifierExt"
    "static com.alecstrong.sql.psi.core.SqlParser.identifier_real"

    "static com.alecstrong.sql.psi.core.SqlParserUtil.indexedColumnExt"
    "static com.alecstrong.sql.psi.core.SqlParser.indexed_column_real"

    "static com.alecstrong.sql.psi.core.SqlParserUtil.indexNameExt"
    "static com.alecstrong.sql.psi.core.SqlParser.index_name_real"

    "static com.alecstrong.sql.psi.core.SqlParserUtil.signedNumberExt"
    "static com.alecstrong.sql.psi.core.SqlParser.signed_number_real"

    "static com.alecstrong.sql.psi.core.SqlParserUtil.tableNameExt"
    "static com.alecstrong.sql.psi.core.SqlParser.table_name_real"
  ]
}

overrides ::= table_constraint
  | string_data_type
  | alter_table_rules

table_constraint ::= [ CONSTRAINT ansi_identifier ] (
  ( PRIMARY KEY | [UNIQUE] INDEX | UNIQUE ) [ansi_index_name] LP ansi_indexed_column [ LP ansi_signed_number RP ] ( COMMA ansi_indexed_column [ LP ansi_signed_number RP ] ) * RP ['STORING' LP ansi_column_name ( COMMA ansi_column_name ) * RP ] [ WHERE <<expr '-1'>> ] ansi_conflict_clause [comment_type] |
  ansi_check_constraint |
  FOREIGN KEY LP ansi_column_name ( COMMA ansi_column_name ) * RP ansi_foreign_key_clause
) {
  extends = "app.cash.sqldelight.dialects.postgresql.grammar.psi.impl.PostgreSqlTableConstraintImpl"
  implements = "app.cash.sqldelight.dialects.postgresql.grammar.psi.PostgreSqlTableConstraint"
  override = true
}

string_data_type ::= ((( 'CHARACTER' 'VARYING' ) | 'VARCHAR' | 'CHARACTER' | 'CHAR') [ LP ansi_signed_number RP ]) | 'TEXT' | 'CITEXT' | 'STRING' {
  override = true
}

create_index_stmt ::= CREATE [ UNIQUE ] INDEX [ IF NOT EXISTS ] [ ansi_database_name DOT ] ansi_index_name ON ansi_table_name LP ansi_indexed_column ( COMMA ansi_indexed_column ) * RP ['STORING' LP ansi_indexed_column ( COMMA ansi_indexed_column ) * RP ] [ WHERE <<expr '-1'>> ] {
  extends = "com.alecstrong.sql.psi.core.psi.impl.SqlCreateIndexStmtImpl"
  implements = "com.alecstrong.sql.psi.core.psi.SqlCreateIndexStmt"
  pin = 6
}

drop_index_stmt ::= DROP INDEX [ IF EXISTS ] [ ansi_table_name '@' ] ansi_index_name {
  mixin = "com.faire.sqldelight.dialects.cockroachdb.grammar.mixins.DropIndexMixin"
  implements = "com.alecstrong.sql.psi.core.psi.SqlDropIndexStmt"
  pin = 2
}

alter_table_rules ::= (
  ansi_alter_table_add_column
  | ansi_alter_table_rename_table
  | {alter_table_rename_column}
  | {alter_table_drop_column}
  | {alter_table_add_constraint}
  | alter_table_alter_primary_key
  | {alter_table_alter_column}
) {
  extends = "app.cash.sqldelight.dialects.postgresql.grammar.psi.impl.PostgreSqlAlterTableRulesImpl"
  implements = "app.cash.sqldelight.dialects.postgresql.grammar.psi.PostgreSqlAlterTableRules"
  override = true
}


alter_table_alter_primary_key ::= ALTER PRIMARY KEY USING "COLUMNS" LP ansi_column_name (COMMA ansi_column_name) * RP {
  pin = 5
}

private ansi_alter_table_add_column ::= <<alterTableAddColumnExt <<alter_table_add_column_real>>>>
private ansi_alter_table_rename_table ::= <<alterTableRenameTableExt <<alter_table_rename_table_real>>>>

private ansi_check_constraint ::= <<checkConstraintExt <<check_constraint_real>>>>
private ansi_column_name ::= <<columnNameExt <<column_name_real>>>>
private ansi_conflict_clause ::= <<conflictClauseExt <<conflict_clause_real>>>>
private ansi_database_name ::= <<databaseNameExt <<database_name_real>>>>
private ansi_foreign_key_clause ::= <<foreignKeyClauseExt <<foreign_key_clause_real>>>>
private ansi_identifier ::= <<identifierExt <<identifier_real>>>>
private ansi_indexed_column ::= <<indexedColumnExt <<indexed_column_real>>>>
private ansi_index_name ::= <<indexNameExt <<index_name_real>>>>
private ansi_signed_number ::= <<signedNumberExt <<signed_number_real>>>>
private ansi_table_name ::= <<tableNameExt <<table_name_real>>>>

